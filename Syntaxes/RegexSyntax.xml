<?xml version="1.0"?>
<syntax name="expression.regex">
  <zones>
    
    <!-- \escape \sequences -->
    <!-- Comes first, to make sure we can escape _anything_. -->
    <include collection="single.character.escape"/>
    <!-- Have to explicitly use linebreaks. -->
    <zone name="literal.character.escape.newline">
      <expression>(\\)(\n)</expression>
      <capture number="1" name="punctuation.delimiter.escape.backslash"/>
      <capture number="2" name="character.newline"/>
    </zone>
    
    <!-- a regex with(?# comments) -->
    <!--
      A bit of a hack, but I don't want the common idiom of utilizing a
      comment to allow linebreaks to show up in the navigator.
    -->
    <zone name="linebreak-comment">
      <starts-with>
        <expression>\(\?#\n</expression>
        <capture number="0" name="punctuation.linebreak-comment.begin"/>
      </starts-with>
      <ends-with>
        <expression>\)</expression>
        <capture number="0" name="punctuation.linebreak-comment.end"/>
      </ends-with>
    </zone>
    <zone name="comment.inline">
      <starts-with>
        <expression>\(\?#</expression>
        <capture number="0" name="punctuation.comment.begin"/>
      </starts-with>
      <ends-with>
        <expression>\)</expression>
        <capture number="0" name="punctuation.comment.end"/>
      </ends-with>
    </zone>
    
    <!-- (groups) -->
    <zone name="anonymous.group">
      <starts-with>
        <expression>\(\?\:</expression>
        <capture number="0" name="punctuation.anonymous.group.begin"/>
      </starts-with>
      <ends-with>
        <expression>\)</expression>
        <capture number="0" name="punctuation.anonymous.group.end"/>
      </ends-with>
      <subzones>
        <include syntax="self"/>
      </subzones>
    </zone>
    <zone name="named.capturing.group">
      <starts-with>
        <expression>(\()(\?P\&lt;)(\w+)(\&gt;)</expression>
        <capture number="0" name="named.capturing.group.begin"/>
        <capture number="1" name="punctuation.named.capturing.group.begin"/>
        <capture number="2" name="punctuation.capture.name.begin"/>
        <capture number="3" name="capture.name"/>
        <capture number="4" name="punctuation.capture.name.end"/>
      </starts-with>
      <ends-with>
        <expression>\)</expression>
        <capture number="0" name="punctuation.named.capturing.group.end"/>
      </ends-with>
      <subzones>
        <include syntax="self"/>
      </subzones>
    </zone>
    <zone name="numbered.capturing.group">
      <starts-with>
        <expression>\(</expression>
        <capture number="0" name="punctuation.numbered.capturing.group.begin"/>
      </starts-with>
      <ends-with>
        <expression>\)</expression>
        <capture number="0" name="punctuation.numbered.capturing.group.end"/>
      </ends-with>
      <subzones>
        <include syntax="self"/>
      </subzones>
    </zone>
    
    <!-- [A-Za-z0-9_-] -->
    <zone name="character.class">
      <starts-with>
        <expression>(\[)(\^)?</expression>
        <capture number="1" name="punctuation.character.class.begin"/>
        <capture number="2" name="punctuation.character.class.negated"/>
      </starts-with>
      <ends-with>
        <expression>\]</expression>
        <capture number="0" name="punctuation.character.class.end"/>
      </ends-with>
      <subzones>
        <include collection="character.class.escape"/>
        <include collection="single.character.escape"/>
        <zone name="character.class.category">
          <expression>(\[\:)(\w+)(\:\])</expression>
          <capture number="1" name="punctuation.character.class.predefined.begin"/>
          <capture number="2" name="character.class.name"/>
          <capture number="3" name="punctuation.character.class.predefined.end"/>
        </zone>
      </subzones>
    </zone>
    
    <zone name="character.class.any">
      <expression>\.</expression>
      <capture number="0" name="punctuation.character.class.any"/>
    </zone>
    
    <zone name="operator.alternator">
      <expression>\|</expression>
    </zone>
    <zone name="operator.general.quantifier">
      <expression>\?|\*|\+</expression>
    </zone>
    <zone name="operator.declarative.quantifier">
      <expression>(\{)(\d*)(,)(\d*)(\})</expression>
      <capture number="1" name="punctuation.declarative.quantifier.begin"/>
      <capture number="2" name="numeric.declarative.quantifier.value.minimum"/>
      <capture number="3" name="punctuation.declarative.quantifier.seperator"/>
      <capture number="4" name="numeric.declarative.quantifier.value.maximum"/>
      <capture number="5" name="punctuation.declarative.quantifier.end"/>
    </zone>
    <zone name="operator.anchor">
      <expression>\^|\$|\\[bByYmMAZz`']</expression>
    </zone>
    <zone name="anonymous.backreference">
      <expression>\\\d</expression>
    </zone>
    
    <!--
      We're going to call linebreaks invalid outside of comments. You should
      be using \n instead, anyway. If you really want to use a literal
      linebreak, just escape it with a slash at the end of the previous line.
    -->
    <zone name="invalid.linebreak">
      <expression>\n</expression>
    </zone>
    
  </zones>
  
  <library>
    <collection name="single.character.escape">
      <include collection="character.class.escape"/>
      <zone name="literal.character.escape">
        <expression>(\\)(.)</expression>
        <capture number="1" name="punctuation.delimiter.escape.backslash"/>
        <capture number="2" name="character"/>
      </zone>
    </collection>
    <collection name="character.class.escape">
      <zone name="character.class.escape">
        <expression>\\[wWdDsS]</expression>
      </zone>
    </collection>
  </library>
</syntax>
